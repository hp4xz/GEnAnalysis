{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c967fdbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def spherical_to_cartesian(theta_deg, phi_deg):\n",
    "    import numpy as np\n",
    "    theta = np.radians(theta_deg)\n",
    "    phi = np.radians(phi_deg)\n",
    "    x = np.sin(theta) * np.cos(phi)\n",
    "    y = np.sin(theta) * np.sin(phi)\n",
    "    z = np.cos(theta)\n",
    "    return np.array([x, y, z])\n",
    "\n",
    "\n",
    "def compute_Px_Pz(trPx, trPy, trPz, ebeam, theta_deg, phi_deg):\n",
    "    import numpy as np\n",
    "    \"\"\"\n",
    "    Compute Px and Pz (spin projections) for all events given:\n",
    "    - trP{xyz}: arrays of scattered electron momenta\n",
    "    - ebeam: array of beam energies\n",
    "    - theta_deg, phi_deg: spin orientation angles (degrees)\n",
    "\n",
    "    Returns:\n",
    "    - Px: np.ndarray\n",
    "    - Pz: np.ndarray\n",
    "    \"\"\"\n",
    "\n",
    "    # Convert spin direction to unit vector\n",
    "    S = spherical_to_cartesian(theta_deg, phi_deg)\n",
    "    S /= np.linalg.norm(S)\n",
    "\n",
    "    # Beam vector (along z)\n",
    "    k_in_z = ebeam\n",
    "    k_in_x = np.zeros_like(trPx)\n",
    "    k_in_y = np.zeros_like(trPy)\n",
    "\n",
    "    # q = k_in - k_out\n",
    "    q_x = k_in_x - trPx\n",
    "    q_y = k_in_y - trPy\n",
    "    q_z = k_in_z - trPz\n",
    "\n",
    "    q_mag = np.sqrt(q_x**2 + q_y**2 + q_z**2)\n",
    "    valid_q = q_mag > 0\n",
    "    q_x[~valid_q] = 1\n",
    "    q_y[~valid_q] = 0\n",
    "    q_z[~valid_q] = 0\n",
    "    q_hat_x = q_x / q_mag\n",
    "    q_hat_y = q_y / q_mag\n",
    "    q_hat_z = q_z / q_mag\n",
    "\n",
    "    # n = k_in × k_out\n",
    "    n_x = k_in_y * trPz - k_in_z * trPy\n",
    "    n_y = k_in_z * trPx - k_in_x * trPz\n",
    "    n_z = k_in_x * trPy - k_in_y * trPx\n",
    "\n",
    "    n_mag = np.sqrt(n_x**2 + n_y**2 + n_z**2)\n",
    "    valid_n = n_mag > 0\n",
    "    n_x[~valid_n] = 1\n",
    "    n_y[~valid_n] = 0\n",
    "    n_z[~valid_n] = 0\n",
    "    n_hat_x = n_x / n_mag\n",
    "    n_hat_y = n_y / n_mag\n",
    "    n_hat_z = n_z / n_mag\n",
    "\n",
    "    # q̂ × S\n",
    "    qxS_x = q_hat_y * S[2] - q_hat_z * S[1]\n",
    "    qxS_y = q_hat_z * S[0] - q_hat_x * S[2]\n",
    "    qxS_z = q_hat_x * S[1] - q_hat_y * S[0]\n",
    "\n",
    "    # Px = n̂ ⋅ (q̂ × S)\n",
    "    Px = n_hat_x * qxS_x + n_hat_y * qxS_y + n_hat_z * qxS_z\n",
    "\n",
    "    # Pz = q̂ ⋅ S\n",
    "    Pz = q_hat_x * S[0] + q_hat_y * S[1] + q_hat_z * S[2]\n",
    "\n",
    "    # Mask invalid\n",
    "    valid = valid_q & valid_n\n",
    "    Px[~valid] = np.nan\n",
    "    Pz[~valid] = np.nan\n",
    "\n",
    "    return Px, Pz\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
